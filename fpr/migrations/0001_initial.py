# Generated by Django 3.0.7 on 2020-06-19 00:13

import autoslug.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Agent',
            fields=[
                ('uuid', models.CharField(db_column='uuid', max_length=36, primary_key=True, serialize=False)),
                ('agentIdentifierType', models.CharField(max_length=100, verbose_name='agent identifier type')),
                ('agentIdentifierValue', models.CharField(max_length=100, verbose_name='agent identifier value')),
                ('agentName', models.CharField(max_length=100, verbose_name='agent name')),
                ('agentType', models.CharField(max_length=100, verbose_name='agent type')),
                ('clientIP', models.CharField(max_length=100, verbose_name='client IP address')),
            ],
            options={
                'db_table': 'Agent',
            },
        ),
        migrations.CreateModel(
            name='Command',
            fields=[
                ('uuid', models.CharField(db_column='pk', max_length=36, primary_key=True, serialize=False)),
                ('commandUsage', models.CharField(max_length=15, verbose_name='command usage')),
                ('commandType', models.CharField(max_length=36, verbose_name='command type')),
                ('verificationCommand', models.CharField(max_length=36, null=True, verbose_name='verification command')),
                ('eventDetailCommand', models.CharField(max_length=36, null=True, verbose_name='event detail command')),
                ('supportedBy', models.CharField(db_column='supportedBy', max_length=36, null=True, verbose_name='supported by')),
                ('command', models.TextField(db_column='command', verbose_name='command')),
                ('outputLocation', models.TextField(db_column='outputLocation', null=True, verbose_name='output location')),
                ('description', models.TextField(db_column='description', verbose_name='description')),
                ('outputFileFormat', models.TextField(db_column='outputFileFormat', null=True, verbose_name='output file format')),
                ('replaces', models.CharField(db_column='replaces', max_length=36, null=True, verbose_name='replaces')),
                ('lastmodified', models.DateTimeField(db_column='lastModified', null=True, verbose_name='last modified')),
                ('enabled', models.IntegerField(db_column='enabled', default=1, null=True, verbose_name='enabled')),
            ],
            options={
                'db_table': 'Command',
            },
        ),
        migrations.CreateModel(
            name='CommandClassification',
            fields=[
                ('uuid', models.CharField(db_column='pk', max_length=36, primary_key=True, serialize=False)),
                ('classification', models.TextField(db_column='classification', null=True, verbose_name='classification')),
                ('replaces', models.CharField(db_column='replaces', max_length=36, null=True, verbose_name='replaces')),
                ('lastmodified', models.DateTimeField(db_column='lastModified', verbose_name='last modified')),
                ('enabled', models.IntegerField(db_column='enabled', default=1, null=True, verbose_name='enabled')),
            ],
            options={
                'db_table': 'CommandClassification',
            },
        ),
        migrations.CreateModel(
            name='CommandRelationship',
            fields=[
                ('uuid', models.CharField(db_column='pk', max_length=36, primary_key=True, serialize=False)),
                ('commandClassification', models.CharField(max_length=36, verbose_name='command clasification')),
                ('command', models.CharField(max_length=36, null=True, verbose_name='command')),
                ('fileID', models.CharField(max_length=36, null=True, verbose_name='file ID')),
                ('replaces', models.CharField(max_length=36, null=True, verbose_name='replaces')),
                ('lastmodified', models.DateTimeField(db_column='lastModified', verbose_name='last modified')),
                ('enabled', models.IntegerField(db_column='enabled', default=1, null=True, verbose_name='enabled')),
            ],
            options={
                'db_table': 'CommandRelationship',
            },
        ),
        migrations.CreateModel(
            name='CommandsSupportedBy',
            fields=[
                ('uuid', models.CharField(db_column='pk', max_length=36, primary_key=True, serialize=False)),
                ('description', models.TextField(db_column='description', null=True, verbose_name='description')),
                ('replaces', models.CharField(db_column='replaces', max_length=36, null=True, verbose_name='replaces')),
                ('lastmodified', models.DateTimeField(db_column='lastModified', verbose_name='last modified')),
                ('enabled', models.IntegerField(db_column='enabled', default=1, null=True, verbose_name='enabled')),
            ],
            options={
                'db_table': 'CommandsSupportedBy',
            },
        ),
        migrations.CreateModel(
            name='CommandType',
            fields=[
                ('uuid', models.CharField(db_column='pk', max_length=36, primary_key=True, serialize=False)),
                ('replaces', models.CharField(db_column='replaces', max_length=36, null=True, verbose_name='replaces')),
                ('type', models.TextField(db_column='type', verbose_name='type')),
                ('lastmodified', models.DateTimeField(db_column='lastModified', verbose_name='last modified')),
                ('enabled', models.IntegerField(db_column='enabled', default=1, null=True, verbose_name='enabled')),
            ],
            options={
                'db_table': 'CommandType',
            },
        ),
        migrations.CreateModel(
            name='FileIDsBySingleID',
            fields=[
                ('uuid', models.CharField(db_column='pk', max_length=36, primary_key=True, serialize=False)),
                ('fileID', models.CharField(max_length=36, null=True, verbose_name='file ID')),
                ('id', models.TextField(db_column='id')),
                ('tool', models.TextField(db_column='tool', verbose_name='tool')),
                ('toolVersion', models.TextField(db_column='toolVersion', null=True, verbose_name='tool version')),
                ('replaces', models.CharField(db_column='replaces', max_length=36, null=True, verbose_name='replaces')),
                ('lastmodified', models.DateTimeField(db_column='lastModified', verbose_name='last modified')),
                ('enabled', models.IntegerField(db_column='enabled', default=1, null=True, verbose_name='enabled')),
            ],
            options={
                'db_table': 'FileIDsBySingleID',
            },
        ),
        migrations.CreateModel(
            name='FileIDType',
            fields=[
                ('uuid', models.CharField(db_column='pk', max_length=36, primary_key=True, serialize=False)),
                ('description', models.TextField(db_column='description', null=True, verbose_name='description')),
                ('replaces', models.CharField(db_column='replaces', max_length=36, null=True, verbose_name='replaces')),
                ('lastmodified', models.DateTimeField(db_column='lastModified', verbose_name='last modified')),
                ('enabled', models.IntegerField(db_column='enabled', default=1, null=True, verbose_name='enabled')),
            ],
            options={
                'db_table': 'FileIDType',
            },
        ),
        migrations.CreateModel(
            name='Format',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(editable=False, help_text='Unique identifier', unique=True)),
                ('description', models.CharField(help_text='Common name of format', max_length=128, verbose_name='description')),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from='description', unique=True, verbose_name='slug')),
            ],
            options={
                'verbose_name': 'Format',
                'ordering': ['group', 'description'],
            },
        ),
        migrations.CreateModel(
            name='FormatGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(editable=False, help_text='Unique identifier', unique=True)),
                ('description', models.CharField(max_length=128, verbose_name='description')),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from='description', unique=True, verbose_name='slug')),
            ],
            options={
                'verbose_name': 'Format group',
                'ordering': ['description'],
            },
        ),
        migrations.CreateModel(
            name='FormatVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enabled', models.BooleanField(default=True, verbose_name='enabled')),
                ('lastmodified', models.DateTimeField(auto_now_add=True, verbose_name='last modified')),
                ('uuid', models.UUIDField(editable=False, help_text='Unique identifier', unique=True)),
                ('version', models.CharField(blank=True, max_length=10, null=True, verbose_name='version')),
                ('pronom_id', models.CharField(blank=True, max_length=32, null=True, verbose_name='pronom id')),
                ('description', models.CharField(blank=True, help_text='Formal name to go in the METS file.', max_length=128, null=True, verbose_name='description')),
                ('access_format', models.BooleanField(default=False, verbose_name='access format')),
                ('preservation_format', models.BooleanField(default=False, verbose_name='preservation format')),
                ('slug', autoslug.fields.AutoSlugField(always_update=True, editable=False, populate_from='description', unique_with=('format',))),
                ('format', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='version_set', to='fpr.Format', to_field='uuid', verbose_name='the related format')),
                ('replaces', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='fpr.FormatVersion', to_field='uuid', verbose_name='the related model')),
            ],
            options={
                'verbose_name': 'Format version',
                'ordering': ['format', 'description'],
            },
        ),
        migrations.CreateModel(
            name='FPCommand',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enabled', models.BooleanField(default=True, verbose_name='enabled')),
                ('lastmodified', models.DateTimeField(auto_now_add=True, verbose_name='last modified')),
                ('uuid', models.UUIDField(editable=False, help_text='Unique identifier', unique=True)),
                ('description', models.CharField(max_length=256, verbose_name='description')),
                ('command', models.TextField(verbose_name='command')),
                ('script_type', models.CharField(choices=[('bashScript', 'Bash script'), ('pythonScript', 'Python script'), ('command', 'Command line'), ('as_is', 'No shebang needed')], max_length=16, verbose_name='script type')),
                ('output_location', models.TextField(blank=True, null=True, verbose_name='output location')),
                ('command_usage', models.CharField(choices=[('characterization', 'Characterization'), ('event_detail', 'Event Detail'), ('extraction', 'Extraction'), ('normalization', 'Normalization'), ('transcription', 'Transcription'), ('validation', 'Validation'), ('verification', 'Verification')], max_length=16, verbose_name='command usage')),
                ('event_detail_command', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='fpr.FPCommand', to_field='uuid', verbose_name='the related event detail command')),
                ('output_format', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='fpr.FormatVersion', to_field='uuid', verbose_name='the related output format')),
                ('replaces', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='fpr.FPCommand', to_field='uuid', verbose_name='the related model')),
            ],
            options={
                'verbose_name': 'Format policy command',
                'ordering': ['description'],
            },
        ),
        migrations.CreateModel(
            name='FPTool',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(editable=False, help_text='Unique identifier', unique=True)),
                ('description', models.CharField(help_text='Name of tool', max_length=256, verbose_name='description')),
                ('version', models.CharField(max_length=64, verbose_name='version')),
                ('enabled', models.BooleanField(default=True, verbose_name='enabled')),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from='_slug', unique=True, verbose_name='slug')),
            ],
            options={
                'verbose_name': 'Normalization tool',
            },
        ),
        migrations.CreateModel(
            name='IDCommand',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enabled', models.BooleanField(default=True, verbose_name='enabled')),
                ('lastmodified', models.DateTimeField(auto_now_add=True, verbose_name='last modified')),
                ('uuid', models.UUIDField(editable=False, help_text='Unique identifier', unique=True)),
                ('description', models.CharField(help_text='Name to identify script', max_length=256, verbose_name='description')),
                ('config', models.CharField(choices=[('PUID', 'PUID'), ('MIME', 'MIME type'), ('ext', 'File extension')], max_length=4, verbose_name='configuration')),
                ('script', models.TextField(help_text='Script to be executed.', verbose_name='script')),
                ('script_type', models.CharField(choices=[('bashScript', 'Bash script'), ('pythonScript', 'Python script'), ('command', 'Command line'), ('as_is', 'No shebang needed')], max_length=16, verbose_name='script type')),
                ('replaces', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='fpr.IDCommand', to_field='uuid', verbose_name='the related model')),
            ],
            options={
                'verbose_name': 'Format identification command',
                'ordering': ['description'],
            },
        ),
        migrations.CreateModel(
            name='IDTool',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(editable=False, help_text='Unique identifier', unique=True)),
                ('description', models.CharField(help_text='Name of tool', max_length=256, verbose_name='description')),
                ('version', models.CharField(max_length=64, verbose_name='version')),
                ('enabled', models.BooleanField(default=True, verbose_name='enabled')),
                ('slug', autoslug.fields.AutoSlugField(always_update=True, editable=False, populate_from='_slug', unique=True, verbose_name='slug')),
            ],
            options={
                'verbose_name': 'Format identification tool',
            },
        ),
        migrations.CreateModel(
            name='IDRule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enabled', models.BooleanField(default=True, verbose_name='enabled')),
                ('lastmodified', models.DateTimeField(auto_now_add=True, verbose_name='last modified')),
                ('uuid', models.UUIDField(editable=False, help_text='Unique identifier', unique=True)),
                ('command_output', models.TextField(verbose_name='command output')),
                ('command', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fpr.IDCommand', to_field='uuid', verbose_name='the related command')),
                ('format', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fpr.FormatVersion', to_field='uuid', verbose_name='the related format')),
                ('replaces', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='fpr.IDRule', to_field='uuid', verbose_name='the related model')),
            ],
            options={
                'verbose_name': 'Format identification rule',
            },
        ),
        migrations.AddField(
            model_name='idcommand',
            name='tool',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='fpr.IDTool', to_field='uuid', verbose_name='the related tool'),
        ),
        migrations.CreateModel(
            name='FPRule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enabled', models.BooleanField(default=True, verbose_name='enabled')),
                ('lastmodified', models.DateTimeField(auto_now_add=True, verbose_name='last modified')),
                ('uuid', models.UUIDField(editable=False, help_text='Unique identifier', unique=True)),
                ('purpose', models.CharField(choices=[('access', 'Access'), ('characterization', 'Characterization'), ('extract', 'Extract'), ('preservation', 'Preservation'), ('thumbnail', 'Thumbnail'), ('transcription', 'Transcription'), ('validation', 'Validation'), ('policy_check', 'Validation against a policy'), ('default_access', 'Default access'), ('default_characterization', 'Default characterization'), ('default_thumbnail', 'Default thumbnail')], max_length=32, verbose_name='purpose')),
                ('count_attempts', models.IntegerField(default=0, verbose_name='count attempts')),
                ('count_okay', models.IntegerField(default=0, verbose_name='count okay')),
                ('count_not_okay', models.IntegerField(default=0, verbose_name='count not okay')),
                ('command', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fpr.FPCommand', to_field='uuid', verbose_name='the related command')),
                ('format', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fpr.FormatVersion', to_field='uuid', verbose_name='the related format')),
                ('replaces', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='fpr.FPRule', to_field='uuid', verbose_name='the related model')),
            ],
            options={
                'verbose_name': 'Format policy rule',
            },
        ),
        migrations.AddField(
            model_name='fpcommand',
            name='tool',
            field=models.ForeignKey(limit_choices_to={'enabled': True}, null=True, on_delete=django.db.models.deletion.CASCADE, to='fpr.FPTool', to_field='uuid', verbose_name='the related tool'),
        ),
        migrations.AddField(
            model_name='fpcommand',
            name='verification_command',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='fpr.FPCommand', to_field='uuid', verbose_name='the related verification command'),
        ),
        migrations.AddField(
            model_name='format',
            name='group',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='fpr.FormatGroup', to_field='uuid', verbose_name='the related group'),
        ),
        migrations.CreateModel(
            name='FileID',
            fields=[
                ('uuid', models.CharField(db_column='pk', max_length=36, primary_key=True, serialize=False)),
                ('description', models.TextField(db_column='description', verbose_name='description')),
                ('validpreservationformat', models.IntegerField(db_column='validPreservationFormat', default=0, null=True, verbose_name='valid preservation format')),
                ('validaccessformat', models.IntegerField(db_column='validAccessFormat', default=0, null=True, verbose_name='valid access format')),
                ('fileidtype', models.CharField(db_column='fileidtype_id', max_length=36, null=True, verbose_name='file ID type')),
                ('replaces', models.CharField(db_column='replaces', max_length=36, null=True, verbose_name='replaces')),
                ('lastmodified', models.DateTimeField(db_column='lastModified', verbose_name='last modified')),
                ('enabled', models.IntegerField(db_column='enabled', default=1, null=True, verbose_name='enabled')),
                ('format', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='fpr.FormatVersion', to_field='uuid', verbose_name='the related format')),
            ],
            options={
                'db_table': 'FileID',
            },
        ),
    ]
